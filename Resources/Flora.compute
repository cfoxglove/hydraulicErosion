struct ParticleData {
	float3 _pos;
	float3 _vel;
	float  _age;
};


RWTexture2D<float> SeedDensity;
RWTexture2D<float> FoliageDensity;
RWTexture2D<float> HeightMap;

float RandomSeed;
int NumParticles;
RWStructuredBuffer<ParticleData> FloraParticles;


float hash(float n)
{
	return frac(sin(n)*439758.5453);
}

float hash2(float n)
{
	return frac(sin(n)*7475713.57521);
}


float hash3(float n)
{
	return frac(sin(n)*1383295.123);
}

float noise(in float3 x)
{
	float3 p = floor(x);
	float3 f = frac(x);

	f = f * f * (3.0 - 2.0 * f);

	float n = p.x + p.y * 57.0 + 113.0 * p.z;

	float res = lerp(lerp(lerp(hash(n + 0.0), hash3(n + 1.0), f.x),
		lerp(hash(n + 57.0), hash2(n + 58.0), f.x), f.y),
		lerp(lerp(hash3(n + 113.0), hash2(n + 114.0), f.x),
			lerp(hash2(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
	return res;
}

void simulateParticles(int id) {
	float dt = 0.1f;

	//update velocities
	float g = -9.8f;
	float drag = 1.0f;
	float3 wind = float3(0.0f, 0.0f, 0.0f);
	FloraParticles[id]._vel.z += g * dt;
	FloraParticles[id]._vel += dt * wind;
	FloraParticles[id]._vel += -1.0f * drag * dt * FloraParticles[id]._vel;

	//update positions
	FloraParticles[id]._pos += dt * FloraParticles[id]._vel;
}

void checkParticleBounds(int id) {
	int2 coords = int2((int)(256.0f * FloraParticles[id]._pos.x), (int)(256.0f * FloraParticles[id]._pos.y));
	if (FloraParticles[id]._pos.x < 0.0f || FloraParticles[id]._pos.x > 1.0f ||
		FloraParticles[id]._pos.y < 0.0f || FloraParticles[id]._pos.y > 1.0f ||
		FloraParticles[id]._pos.z < HeightMap[coords] || FloraParticles[id]._pos.z > 1.0f) {
		
		//reset particle
		FloraParticles[id]._age = -1.0f;
	}
}

void spawnParticles(int id) {
	if (FloraParticles[id]._age < 0.0f) {
		uint2 coords = uint2((uint)(256.0f * hash(RandomSeed + (float)id)), (uint)(256.0f * hash(RandomSeed + (float)id + 7432.132f)));
		float p = FoliageDensity[coords];

		float r = hash(RandomSeed + 4321.432f + 8.163f * (float)id);
		if (r > p) {
			FloraParticles[id]._age = 1.0f;
		}
	}
}

#pragma kernel FloraSimParticles
[numthreads(16, 1, 1)]
void FloraSimParticles (uint3 id : SV_DispatchThreadID)
{
	simulateParticles(id.x);
	checkParticleBounds(id.x);
	spawnParticles(id.x);
}


#pragma kernel FloraSimTextures
[numthreads(8, 8, 1)]
void FloraSimTextures(uint3 id : SV_DispatchThreadID) {
	float2 uv = float2((float)id.x / 256.0f, (float)id.y / 256.0f);
	
	/*
	float mx = HeightMap[uint2(id.x + 1, id.y)] - HeightMap[uint2(id.x - 1, id.y)];
	float my = HeightMap[uint2(id.x, id.y + 1)] - HeightMap[uint2(id.x, id.y - 1)];

	float m = 0.0f;// (mx + my) / 2.0f;
	*/
	
	//terribly slow - optimize!!!
	float min_d = 99999999.0f;
	for (int i = 0; i < NumParticles; i++) {
		if (FloraParticles[i]._age > 0.0f && FloraParticles[i]._pos.z < HeightMap[id.xy]) {
			float2 v = FloraParticles[i]._pos.xy - uv;
			float d = 50.0f * length(v);
			if (d < min_d) {
				min_d = d;
			}
		}
	}

	SeedDensity[id.xy] += 0.6f * (1.0f - saturate(min_d));
}